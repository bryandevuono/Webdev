// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Webdev.CompiledModels
{
    public partial class MyDbContextModel
    {
        partial void Initialize()
        {
            var admins = AdminsEntityType.Create(this);
            var events = EventsEntityType.Create(this);
            var officeAttendance = OfficeAttendanceEntityType.Create(this);
            var users = UsersEntityType.Create(this);

            AdminsEntityType.CreateAnnotations(admins);
            EventsEntityType.CreateAnnotations(events);
            OfficeAttendanceEntityType.CreateAnnotations(officeAttendance);
            UsersEntityType.CreateAnnotations(users);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var admins = FindEntityType("Admins")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            admins.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var adminsTableBase = new TableBase("Admins", null, relationalModel);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "text", adminsTableBase)
            {
                IsNullable = true
            };
            adminsTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uuid", adminsTableBase);
            adminsTableBase.Columns.Add("Id", idColumnBase);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "text", adminsTableBase)
            {
                IsNullable = true
            };
            adminsTableBase.Columns.Add("Password", passwordColumnBase);
            var usernameColumnBase = new ColumnBase<ColumnMappingBase>("Username", "text", adminsTableBase)
            {
                IsNullable = true
            };
            adminsTableBase.Columns.Add("Username", usernameColumnBase);
            relationalModel.DefaultTables.Add("Admins", adminsTableBase);
            var adminsMappingBase = new TableMappingBase<ColumnMappingBase>(admins, adminsTableBase, true);
            adminsTableBase.AddTypeMapping(adminsMappingBase, false);
            defaultTableMappings.Add(adminsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, admins.FindProperty("Id")!, adminsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, admins.FindProperty("Email")!, adminsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, admins.FindProperty("Password")!, adminsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usernameColumnBase, admins.FindProperty("Username")!, adminsMappingBase);

            var tableMappings = new List<TableMapping>();
            admins.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var adminTable = new Table("Admin", null, relationalModel);
            var idColumn = new Column("Id", "uuid", adminTable);
            adminTable.Columns.Add("Id", idColumn);
            var emailColumn = new Column("Email", "text", adminTable)
            {
                IsNullable = true
            };
            adminTable.Columns.Add("Email", emailColumn);
            var passwordColumn = new Column("Password", "text", adminTable)
            {
                IsNullable = true
            };
            adminTable.Columns.Add("Password", passwordColumn);
            var usernameColumn = new Column("Username", "text", adminTable)
            {
                IsNullable = true
            };
            adminTable.Columns.Add("Username", usernameColumn);
            var pK_Admin = new UniqueConstraint("PK_Admin", adminTable, new[] { idColumn });
            adminTable.PrimaryKey = pK_Admin;
            var pK_AdminUc = RelationalModel.GetKey(this,
                "Admins",
                new[] { "Id" });
            pK_Admin.MappedKeys.Add(pK_AdminUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AdminUc).Add(pK_Admin);
            adminTable.UniqueConstraints.Add("PK_Admin", pK_Admin);
            relationalModel.Tables.Add(("Admin", null), adminTable);
            var adminTableMapping = new TableMapping(admins, adminTable, true);
            adminTable.AddTypeMapping(adminTableMapping, false);
            tableMappings.Add(adminTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, admins.FindProperty("Id")!, adminTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, admins.FindProperty("Email")!, adminTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, admins.FindProperty("Password")!, adminTableMapping);
            RelationalModel.CreateColumnMapping(usernameColumn, admins.FindProperty("Username")!, adminTableMapping);

            var events = FindEntityType("Events")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            events.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var eventsTableBase = new TableBase("Events", null, relationalModel);
            var adminAprovalColumnBase = new ColumnBase<ColumnMappingBase>("AdminAproval", "boolean", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("AdminAproval", adminAprovalColumnBase);
            var dateColumnBase = new ColumnBase<ColumnMappingBase>("Date", "timestamp with time zone", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("Date", dateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("Description", descriptionColumnBase);
            var endTimeColumnBase = new ColumnBase<ColumnMappingBase>("EndTime", "text", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("EndTime", endTimeColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", eventsTableBase);
            eventsTableBase.Columns.Add("Id", idColumnBase0);
            var locationColumnBase = new ColumnBase<ColumnMappingBase>("Location", "text", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("Location", locationColumnBase);
            var startTimeColumnBase = new ColumnBase<ColumnMappingBase>("StartTime", "text", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("StartTime", startTimeColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "text", eventsTableBase)
            {
                IsNullable = true
            };
            eventsTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Events", eventsTableBase);
            var eventsMappingBase = new TableMappingBase<ColumnMappingBase>(events, eventsTableBase, true);
            eventsTableBase.AddTypeMapping(eventsMappingBase, false);
            defaultTableMappings0.Add(eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, events.FindProperty("Id")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminAprovalColumnBase, events.FindProperty("AdminAproval")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase, events.FindProperty("Date")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, events.FindProperty("Description")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endTimeColumnBase, events.FindProperty("EndTime")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)locationColumnBase, events.FindProperty("Location")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startTimeColumnBase, events.FindProperty("StartTime")!, eventsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, events.FindProperty("Title")!, eventsMappingBase);

            var tableMappings0 = new List<TableMapping>();
            events.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var eventsTable = new Table("Events", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", eventsTable);
            eventsTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var adminAprovalColumn = new Column("AdminAproval", "boolean", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("AdminAproval", adminAprovalColumn);
            var dateColumn = new Column("Date", "timestamp with time zone", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("Date", dateColumn);
            var descriptionColumn = new Column("Description", "text", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("Description", descriptionColumn);
            var endTimeColumn = new Column("EndTime", "text", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("EndTime", endTimeColumn);
            var locationColumn = new Column("Location", "text", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("Location", locationColumn);
            var startTimeColumn = new Column("StartTime", "text", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("StartTime", startTimeColumn);
            var titleColumn = new Column("Title", "text", eventsTable)
            {
                IsNullable = true
            };
            eventsTable.Columns.Add("Title", titleColumn);
            var pK_Events = new UniqueConstraint("PK_Events", eventsTable, new[] { idColumn0 });
            eventsTable.PrimaryKey = pK_Events;
            var pK_EventsUc = RelationalModel.GetKey(this,
                "Events",
                new[] { "Id" });
            pK_Events.MappedKeys.Add(pK_EventsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EventsUc).Add(pK_Events);
            eventsTable.UniqueConstraints.Add("PK_Events", pK_Events);
            relationalModel.Tables.Add(("Events", null), eventsTable);
            var eventsTableMapping = new TableMapping(events, eventsTable, true);
            eventsTable.AddTypeMapping(eventsTableMapping, false);
            tableMappings0.Add(eventsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, events.FindProperty("Id")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(adminAprovalColumn, events.FindProperty("AdminAproval")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn, events.FindProperty("Date")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, events.FindProperty("Description")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(endTimeColumn, events.FindProperty("EndTime")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(locationColumn, events.FindProperty("Location")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(startTimeColumn, events.FindProperty("StartTime")!, eventsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, events.FindProperty("Title")!, eventsTableMapping);

            var officeAttendance = FindEntityType("OfficeAttendance")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            officeAttendance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var officeAttendanceTableBase = new TableBase("OfficeAttendance", null, relationalModel);
            var endColumnBase = new ColumnBase<ColumnMappingBase>("End", "timestamp with time zone", officeAttendanceTableBase)
            {
                IsNullable = true
            };
            officeAttendanceTableBase.Columns.Add("End", endColumnBase);
            var officeAttendanceIdColumnBase = new ColumnBase<ColumnMappingBase>("OfficeAttendanceId", "uuid", officeAttendanceTableBase);
            officeAttendanceTableBase.Columns.Add("OfficeAttendanceId", officeAttendanceIdColumnBase);
            var startColumnBase = new ColumnBase<ColumnMappingBase>("Start", "timestamp with time zone", officeAttendanceTableBase)
            {
                IsNullable = true
            };
            officeAttendanceTableBase.Columns.Add("Start", startColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "uuid", officeAttendanceTableBase)
            {
                IsNullable = true
            };
            officeAttendanceTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("OfficeAttendance", officeAttendanceTableBase);
            var officeAttendanceMappingBase = new TableMappingBase<ColumnMappingBase>(officeAttendance, officeAttendanceTableBase, true);
            officeAttendanceTableBase.AddTypeMapping(officeAttendanceMappingBase, false);
            defaultTableMappings1.Add(officeAttendanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)officeAttendanceIdColumnBase, officeAttendance.FindProperty("OfficeAttendanceId")!, officeAttendanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endColumnBase, officeAttendance.FindProperty("End")!, officeAttendanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startColumnBase, officeAttendance.FindProperty("Start")!, officeAttendanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, officeAttendance.FindProperty("UserId")!, officeAttendanceMappingBase);

            var tableMappings1 = new List<TableMapping>();
            officeAttendance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var attendanceTable = new Table("Attendance", null, relationalModel);
            var officeAttendanceIdColumn = new Column("OfficeAttendanceId", "uuid", attendanceTable);
            attendanceTable.Columns.Add("OfficeAttendanceId", officeAttendanceIdColumn);
            var endColumn = new Column("End", "timestamp with time zone", attendanceTable)
            {
                IsNullable = true
            };
            attendanceTable.Columns.Add("End", endColumn);
            var startColumn = new Column("Start", "timestamp with time zone", attendanceTable)
            {
                IsNullable = true
            };
            attendanceTable.Columns.Add("Start", startColumn);
            var userIdColumn = new Column("UserId", "uuid", attendanceTable)
            {
                IsNullable = true
            };
            attendanceTable.Columns.Add("UserId", userIdColumn);
            var pK_Attendance = new UniqueConstraint("PK_Attendance", attendanceTable, new[] { officeAttendanceIdColumn });
            attendanceTable.PrimaryKey = pK_Attendance;
            var pK_AttendanceUc = RelationalModel.GetKey(this,
                "OfficeAttendance",
                new[] { "OfficeAttendanceId" });
            pK_Attendance.MappedKeys.Add(pK_AttendanceUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AttendanceUc).Add(pK_Attendance);
            attendanceTable.UniqueConstraints.Add("PK_Attendance", pK_Attendance);
            relationalModel.Tables.Add(("Attendance", null), attendanceTable);
            var attendanceTableMapping = new TableMapping(officeAttendance, attendanceTable, true);
            attendanceTable.AddTypeMapping(attendanceTableMapping, false);
            tableMappings1.Add(attendanceTableMapping);
            RelationalModel.CreateColumnMapping(officeAttendanceIdColumn, officeAttendance.FindProperty("OfficeAttendanceId")!, attendanceTableMapping);
            RelationalModel.CreateColumnMapping(endColumn, officeAttendance.FindProperty("End")!, attendanceTableMapping);
            RelationalModel.CreateColumnMapping(startColumn, officeAttendance.FindProperty("Start")!, attendanceTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, officeAttendance.FindProperty("UserId")!, attendanceTableMapping);

            var users = FindEntityType("Users")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            users.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var usersTableBase = new TableBase("Users", null, relationalModel);
            var emailColumnBase0 = new ColumnBase<ColumnMappingBase>("Email", "text", usersTableBase)
            {
                IsNullable = true
            };
            usersTableBase.Columns.Add("Email", emailColumnBase0);
            var firstnameColumnBase = new ColumnBase<ColumnMappingBase>("Firstname", "text", usersTableBase)
            {
                IsNullable = true
            };
            usersTableBase.Columns.Add("Firstname", firstnameColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "integer", usersTableBase);
            usersTableBase.Columns.Add("Id", idColumnBase1);
            var lastnameColumnBase = new ColumnBase<ColumnMappingBase>("Lastname", "text", usersTableBase)
            {
                IsNullable = true
            };
            usersTableBase.Columns.Add("Lastname", lastnameColumnBase);
            var passwordColumnBase0 = new ColumnBase<ColumnMappingBase>("Password", "text", usersTableBase)
            {
                IsNullable = true
            };
            usersTableBase.Columns.Add("Password", passwordColumnBase0);
            var recurringDaysColumnBase = new ColumnBase<ColumnMappingBase>("RecurringDays", "integer", usersTableBase)
            {
                IsNullable = true
            };
            usersTableBase.Columns.Add("RecurringDays", recurringDaysColumnBase);
            relationalModel.DefaultTables.Add("Users", usersTableBase);
            var usersMappingBase = new TableMappingBase<ColumnMappingBase>(users, usersTableBase, true);
            usersTableBase.AddTypeMapping(usersMappingBase, false);
            defaultTableMappings2.Add(usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, users.FindProperty("Id")!, usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase0, users.FindProperty("Email")!, usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstnameColumnBase, users.FindProperty("Firstname")!, usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastnameColumnBase, users.FindProperty("Lastname")!, usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase0, users.FindProperty("Password")!, usersMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recurringDaysColumnBase, users.FindProperty("RecurringDays")!, usersMappingBase);

            var tableMappings2 = new List<TableMapping>();
            users.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn1 = new Column("Id", "integer", usersTable);
            usersTable.Columns.Add("Id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var emailColumn0 = new Column("Email", "text", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("Email", emailColumn0);
            var firstnameColumn = new Column("Firstname", "text", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("Firstname", firstnameColumn);
            var lastnameColumn = new Column("Lastname", "text", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("Lastname", lastnameColumn);
            var passwordColumn0 = new Column("Password", "text", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("Password", passwordColumn0);
            var recurringDaysColumn = new Column("RecurringDays", "integer", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("RecurringDays", recurringDaysColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn1 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "Users",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(users, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings2.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, users.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn0, users.FindProperty("Email")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(firstnameColumn, users.FindProperty("Firstname")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(lastnameColumn, users.FindProperty("Lastname")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn0, users.FindProperty("Password")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(recurringDaysColumn, users.FindProperty("RecurringDays")!, usersTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
